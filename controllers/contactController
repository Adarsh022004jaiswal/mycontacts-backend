const asyncHandler = require("express-async-handler");
const Contact = require("../models/contactModel");
//@desc Get all contacts
//@route get /api/contacts
//@acess private
const getContacts = asyncHandler(async (req, res) => {
    const contacts = await Contact.find({ user_id: req.user.id});
    res.status(200).json(contacts);
});



//@desc Create New Contact
//@route POST /api/contacts
//@acess private
const createContact = asyncHandler(async (req, res) => {
    console.log("The req body is :",req.body);
    const { name, email, phone} = req.body;
    if(!name || !email || !phone){
        res.status(400);
        throw new Error("All fields are mandatory !");
    }
    const contact = await Contact.create({
        name,
        email,
        phone,
        user_id: req.user.id
    });
    res.status(201).json(contact);
});


//@desc get contact
//@route GET /api/contacts/:id
//@acess private
const getContact = asyncHandler(async (req, res) => {
    const contact = await Contact.findById(req.params.id);
    if(!contact){
        res.status(404);
        throw new Error("Contact not found");
    }
    res.status(200).json(contact);
});

//@desc update contact
//@route PUT /api/contact/:id
//@acess private
const updateContact = asyncHandler(async (req, res) => {
    const contact = await Contact.findById(req.params.id);
    if(!contact){
        res.status(404);
        throw new Error("Contact not found");
    }
    if(contact.user_id.toString()!== req.user.id){
      res.status(403);
      throw new Error("User don't have permisson to update other user contacts");
    }
    const updatedContact = await Contact.findByIdAndUpdate(
        req.params.id,
        req.body,
        {new: true}
    );
    res.status(200).json(updatedContact);
});

//@desc delete contact
//@route DELETE /api/contacts/:id
//@acess private
const deleteContact = asyncHandler(async (req, res) => {
    try {
      const contact = await Contact.findById(req.params.id);
  
      if (!contact) {
        res.status(404);
        throw new Error("Contact not found");
      }
      if(contact.user_id.toString()!== req.user.id){
        res.status(403);
        throw new Error("User don't have permisson to delete other user contacts");
      }
  
      await Contact.deleteOne({ _id: req.params.id }); // Use deleteOne to remove the contact
  
      res.status(200).json({ message: "Contact removed" });
    } catch (err) {
      console.log(err);
      res.status(500).json({
        message: "Internal Server Error",
      });
    }
  });
  

module.exports = {getContacts,createContact,getContact,updateContact,deleteContact};